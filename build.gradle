plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
  id 'jacoco'
  id "org.sonarqube" version "3.3"
}

sonarqube {
  properties {
    property "sonar.projectKey", "datai999_thesis-service"
    property "sonar.organization", "datai999"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

group = 'com.thesis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
  implementation 'com.google.firebase:firebase-admin:8.0.1'
  implementation 'com.vladmihalcea:hibernate-types-52:2.10.4'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.apache.commons:commons-collections4:4.0'
  implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework:spring-context:5.3.9'
  implementation 'org.modelmapper:modelmapper:2.4.3'
  implementation 'io.jsonwebtoken:jjwt:0.9.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
  testImplementation 'org.mockito:mockito-inline:3.8.0'
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
	useJUnitPlatform()
  testLogging {
		events "passed", "skipped", "failed"
	}
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  jacocoTestReport {
    reports {
      xml.required = false
      csv.required = false
    }
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
            "**/service/advice/**",
            "**/service/config/**",
            "**/service/constant/**",
            "**/service/controller/**",
            "**/service/dto/score/response/TopicScoreResponse**",
            "**/service/dto/score/response/UserScoreResponse**",
            "**/service/model/**",
            "**/service/service/TimerNotificationService**",
            "**/service/service/score/ScoreService.class",
            "**/service/service/score/TemplateService.class",
            "**/service/service/topic/CouncilService.class",
            "**/service/service/user/JwtTokenService.class",
            "**/service/service/user/NotificationService.class",
            "**/service/service/user/StudentService.class",
            "**/service/service/user/UserService.class",
            "**/service/utils/ContextAccessor.class",
            "**/service/utils/ContextHolder.class"
        ])
    }))
  }
}
